// generated 2005/1/16 14:23:02 BRST by hfs@localhost.(none)
// using glademm V1.1.2
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/hfs/KDevelop/glade1/plivrus2/livrus.glade
// for gtk 1.2.10 and gtkmm 1.2.10
//
// Please modify the corresponding derived classes in ./src/frmPrincipal.cc

#include "config.h"
#include "frmPrincipal.hh"
#include <gtk--/menuitem.h>
#include <gtk--/menu.h>
#include <gtk--/menubar.h>
#include <gtk--/button.h>
#include <gtk--/separator.h>
#include <gtk--/pixmap.h>
#include "../pixmaps/cliente.xpm"
#include "../pixmaps/livro.xpm"
#include "../pixmaps/livros.xpm"
#include "../pixmaps/sobre.xpm"
#include "../pixmaps/sair.xpm"
#include <gtk--/toolbar.h>
#include <gtk--/fixed.h>
#include <gtk--/statusbar.h>
#include <gtk--/box.h>

frmPrincipal_glade::frmPrincipal_glade(
) : Gtk::Window(GTK_WINDOW_TOPLEVEL)
{  
   
   Gtk::Window *frmPrincipal = this;
   Gtk::MenuItem *mnuCadAssuntos = NULL;
   Gtk::Menu *mnuCadastros_menu = manage(new class Gtk::Menu());
   Gtk::MenuItem *mnuCadastros = NULL;
   Gtk::MenuBar *menubar1 = manage(new class Gtk::MenuBar());
   Gtk::VSeparator *vseparator1 = manage(new class Gtk::VSeparator());
   Gtk::Toolbar *toolbar1 = manage(new class Gtk::Toolbar(GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_ICONS));
   Gtk::Fixed *fixed1 = manage(new class Gtk::Fixed());
   Gtk::Statusbar *statusbar1 = manage(new class Gtk::Statusbar());
   Gtk::Statusbar *statusbar2 = manage(new class Gtk::Statusbar());
   Gtk::HBox *hbox1 = manage(new class Gtk::HBox(false, 0));
   Gtk::VBox *vbox1 = manage(new class Gtk::VBox(false, 0));
   
   mnuCadastros_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Assuntos"));
   mnuCadAssuntos = (Gtk::MenuItem *)mnuCadastros_menu->items().back();
   
   menubar1->items().push_back(Gtk::Menu_Helpers::MenuElem("_Cadastros", *mnuCadastros_menu));
   mnuCadastros = (Gtk::MenuItem *)menubar1->items().back();
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("", *manage(new Gtk::Pixmap(cliente_xpm)), 0));
   Gtk::Button *button1 = static_cast<Gtk::Button *>(toolbar1->tools().back()->get_widget());
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("", *manage(new Gtk::Pixmap(livro_xpm)), 0));
   Gtk::Button *button2 = static_cast<Gtk::Button *>(toolbar1->tools().back()->get_widget());
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("", *manage(new Gtk::Pixmap(livros_xpm)), 0));
   Gtk::Button *button3 = static_cast<Gtk::Button *>(toolbar1->tools().back()->get_widget());
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::Element(*vseparator1));
   
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("", *manage(new Gtk::Pixmap(sobre_xpm)), 0));
   Gtk::Button *button4 = static_cast<Gtk::Button *>(toolbar1->tools().back()->get_widget());
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("", *manage(new Gtk::Pixmap(sair_xpm)), 0));
   Gtk::Button *button5 = static_cast<Gtk::Button *>(toolbar1->tools().back()->get_widget());
   menubar1->set_shadow_type(GTK_SHADOW_OUT);
   toolbar1->set_space_size(5);
   toolbar1->set_tooltips(true);
   toolbar1->set_space_style(GTK_TOOLBAR_SPACE_EMPTY);
   statusbar1->set_usize(120,21);
   statusbar2->set_usize(-1,21);
   hbox1->pack_start(*statusbar1, false, false, 0);
   hbox1->pack_start(*statusbar2);
   vbox1->pack_start(*menubar1, false, false, 0);
   vbox1->pack_start(*toolbar1, false, false, 0);
   vbox1->pack_start(*fixed1);
   vbox1->pack_start(*hbox1, false, true, 0);
   frmPrincipal->set_usize(310,400);
   frmPrincipal->set_title("Livrus Virtus");
   frmPrincipal->set_modal(false);
   frmPrincipal->set_position(GTK_WIN_POS_CENTER);
   frmPrincipal->add(*vbox1);
   mnuCadAssuntos->show();
   mnuCadastros_menu->show();
   mnuCadastros->show();
   menubar1->show();
   vseparator1->show();
   toolbar1->show();
   fixed1->show();
   statusbar1->show();
   statusbar2->show();
   hbox1->show();
   vbox1->show();
   frmPrincipal->show();
   mnuCadAssuntos->activate.connect(SigC::slot(this, &frmPrincipal_glade::on_mnuCadAssuntos_activate));
   mnuCadastros->activate.connect(SigC::slot(this, &frmPrincipal_glade::on_mnuCadastros_activate));
}

frmPrincipal_glade::~frmPrincipal_glade()
{  
}
