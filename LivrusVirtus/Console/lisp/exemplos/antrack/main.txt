;  NOT FINISHED YET!!!

(setq customers '((1 "Doe, John" "Greeley CO" 0)
                  (2 "Poppins, Mary" "195 Jewett Parkway, Buffalo NY" 5)
                  (3 "Flintstone, Fred" "Bedrock" 2)
                 )
)

(setq trains '((105 Chicago Buffalo 55.0 (1 3))
               (210 Lincoln Denver 97.45(2))
               (999 NewYork Syracuse 23.33())
              )
)

(defun main ()
       (loop
            (terpri)
            (princ "Please enter a command enclosed in parentheses...")
            (setq response (read))
            (case (car response)
                (help (show-file "helpfile"))
                (quit (return-from main))
                (add  (add-train))
                (remove (delete-train (third response)))
                (book   (book-seat))
                (unbook (unbook-seat))
                (run    (run-train (third response)))
                (list   (case (second response) 
                            (customers (print customers))
                            (trains    (print trains))
                            (riders    (list-riders (third response)))
                        )
                        (terpri)
                )
                (t (princ "unrecognized command")(terpri))
            )
       )
)

(defun show-file (filename)
    (let (fp)
         (setq fp (open filename))
         (loop
              (setq line (read-line fp nil "end-of-file"))
              (xif (string= line "end-of-file")
               then (return)
               else (princ line) (terpri)
              )
         )
         (close fp)
    )
)

(defun book-seat ()
    (let (name trainnum train customer custnum rider-list)
         (read-line)
         (princ "Enter name of customer as last name, comma, first name: ")
         (setq name (read-line))

         (setq customer (get-customer name))

         (princ "Train number? ")
         (setq trainnum (read))
         (setq train (assoc trainnum trains))
         (xif (null train)
          then (princ "No such train ") (terpri)
               (return-from book-seat)
         )
 
         (princ "The train from ")(princ (second train))(princ " to ")
         (princ (third train))(princ " costs $")(princ (fourth train))
         (terpri)
         (princ "Is this ok? (y/n)  ")
         (if (equal (read) 'n)
               (return-from book-seat)
         )
          
         (setf (fifth train) (cons (car customer) (fifth train)))

         (xif (> (car (last customer)) 4)
          then (princ "You have now reached your frequent rider amount.\n")
               (princ "Therefore, this train ride will cost you half fare.\n")
               (setf (fourth customer) 1)
          else (princ "You are booked!")(terpri)
               (incf (fourth customer))
         )
    )
)

(defun get-customer (name)
    (let (customer)
         (setq customer (find-customer name))
         (xif (null customer)
          then (add-customer name)
          else customer
         )
    )
)

(defun find-customer (name)
    (dolist (customer customers)
         (xif (string= name (second customer))
          then (return-from find-customer customer)
         )
    )
    nil
)

(defun add-customer (name)
    (let (address newnum frequent-rider-count)
         (setq frequent-rider-count 0)
         (princ "Now adding new customer...")(terpri)
         (princ "What is the address? ")
         (setq address (read-line))
         (setq newnum (1+ (car (car (last customers)))))
         (setq new-customer
              (list newnum name address frequent-rider-count)
         )
         (setq customers (cons new-customer customers))
         new-customer
    )
)

(defun add-train ()
    (let (trainnum orig-city dest-city cost)
         (princ "What is the new train number? ")
         (setq trainnum (read))
         (xif (assoc trainnum trains)
          then (princ "This number is already taken.")(terpri)
               (return-from add-train)
         )

         (princ "From which city does it leave? ")
         (setq orig-city (read-line))
         (princ "To which city does it go? ")
         (setq dest-city (read-line))
         (princ "How much does it cost? ")
         (setq cost (read))
    
         (setq trains
              (cons (list trainnum orig-city dest-city cost 0)
                    trains
              )
         )
    )
)

(defun delete-train (trainnum)
    (let (train)
         (setq train (assoc trainnum trains))
         (xif (null train)
          then (princ "No such train!")(terpri)
          else (setq trains (delete train trains))
         )
     )
)

(defun unbook-seat ()
     (let (customer train name)
          (princ "Name of customer? ")
          (read-line)
          (setq name (read-line))
          (xif (null (setq customer (find-customer name)))
           then (princ "No such customer!")(terpri)
                (return-from unbook-seat)
          )
          (princ "Train number? ")
          (setq trainnum (read))
          (xif (null (setq train (assoc trainnum trains)))
           then (princ "No such train!")(terpri)
                (return-from unbook-seat)
          )
          (xif (member (car customer) (fifth train))
           then (setf (fifth train) (delete (car customer) (fifth train)))
                (princ "Done!") (terpri)
           else (princ "That customer did not have a booking on that train.")
                (terpri)
          )
     )
)

(defun run-train (trainnum)
    (let (train)
         (setq train (assoc trainnum trains))
         (xif (null train)
          then (princ "No such train!")(terpri)
          else (setf (fifth train) nil)    ; empty out customer list
         )
     )
)

(defun list-riders (trainnum)
     (let (train)
          (xif (null (setq train (assoc trainnum trains)))
           then (princ "No such train!")(terpri)
                (return-from list-riders)
          )
          (setq passengers (fifth train))  ; this is just a list of numbers
          (dolist (n passengers)
                (princ (second (assoc n customers)))(terpri)
          )
          (princ "---end of list---")(terpri)
     )
)
