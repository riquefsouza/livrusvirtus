LISP Tutorial   by Mark Meyer
Chapter 3.1
Arithmetic
--------------------------------------------------------------------------------
TOPICS:  
--------------------------------------------------------------------------------

LISP has a full assortment of arithmetic functions, which operate on both
integers and floating point (real) numbers.  In addition, there is another
type called "rational" which is represented as exact fractions.  For example,
the result of (/ 5 3) is 5/3, not 1.666667.

Many LISP arithmetic functions accept more than one argument, which makes it
easy to sum up a list.  For example:

     (+ 1 3)
4

     (+ 3 5 7 6 2 8)
31

With non-commutative operators like subtraction and division, you must be
careful:

     (- 6 3 2 1)
0

     (/ 6 3 2)
1

Because the division operator associates to the left.  If you wanted to
associate to the right, you must use parentheses:

     (/ 6 (/ 3 2))
4

BEWARE!  If you have a list assigned to a variable, you cannot just use the
+ operator, for example, on it directly.  

     (setq x (6 7 8))
     (+ x)               <---- WRONG!

However, there is a way to do this, which is to use the metafunction apply:

     (apply '+ x)
21

Notice that you must quote the function's name, or + in this example.

Operators
=========

Here are the basic arithmetic operators:

    +         addition
    -         subtraction
    *         multiplication
    /         division
    mod       modulus
    rem       remainder

Following are other commonly use functions

    expt      exponentiation
    sqrt      square root
    sin       sine  (cosine, tangent, etc. are also built-in)

There is also a built-in constant, pi, which is 3.141592653589793.

Rationals
=========

As mentioned above, rationals are exact fractions, like 1/3, instead of their
(approximate) decimal expansions.  This preserves the exactness of the answers
so that no round-off error will accumulate.  Try the following, and see these
results:

     (/ 5 3)
5/3

     (/ 5.0 3)
1.66666666666667

     (+ (/ 5 3) (/ 1 3))
2

     (+ (/ 5.0 3) 1.3333)
2.999966666666666

     (+ 2/3 1/3)
1

As you can see, the way to get a real number with a division, instead of a
rational, is to make sure that one of the arguments is a real number, such as
5.0 instead of just 5.  You can also use a "cast" function to change the type:

     (float 2/3)
0.6666666666666666

There is a type conversion mechanism in LISP, like casts in C, called "coerce."
Here's an example:

     (coerce 1/3 'float)

which says take the rational value 1/3 and return the corresponding floating
point decimal expansion.  You will get 0.33333333333.  

A corresponding function, type-of, returns the type of various LISP data:

     (type-of 1/3)    ==>  RATIO
     (type-of 57)     ==>  FIXNUM
     (type-of 3.5)    ==>  FLOAT
     (type-of "mark") ==>  STRING
     (type-of '(a b)) ==>  CONS

However, LISP will not let you make ridiculous conversions like converting a
FLOAT to a FIXNUM.

There is also a random number generator in Ibuki.  Just give it the upper limit
and it will return an integer between 0 and that upper limit:

     (random 5)  ==>  3

but you may have gotten 0, 1, 2, 3, or 4.

--------------------------------------------------------------------------------
