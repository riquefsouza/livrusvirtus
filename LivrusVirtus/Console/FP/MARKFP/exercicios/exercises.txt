1.  Write a function which performs the equivalent of the LISP expression

                (+ (* a b (1- c)) (- e f) g)

    Beware!  In FP, the arithmetic operators can only work with 2 operands.


2.  Write an FP function which does the equivalent of 1+ in LISP, i.e. it
    adds 1 to its argument.


3.  Write countatoms in FP.  This returns the number of non-null atoms in
    a list, no matter how many sublists there are.

        countatoms:<a,b,<c>,<<d,e>,f>,<<g>>>

    gives us 7.


4.  Write function "lastelem" which returns the last element of a list, if
    its data is a list.  Otherwise, if the argument is an atom, it returns
    the atom:

        lastelem:<a,b,c>            returns c
        lastelem:5                  returns 5

    You may use the built-in length function and the -1 function.


5.  Now write another function "last" which works exactly like -1, except
    that you cannot use -1.  You can use length, and it must be recursive.
    You do not need to do error checking as you did in lastelem above.


6.  Write an FP equivalent of LISP's assoc function.  Use recursion only,
    do not use "while".  Here's an example:

       alist <- id:<<mark,35>,<kathy,26>,<doran,30>,<sally,55>,<alfie,6>>
       assoc:<doran,{alist}>

    This should give me 30.  If the name can't be found in the alist, then
    return nil.


7.  Write an FP function which uses the "while" functional form and returns
    the length of the first list it finds.  For example:

        (def length_first_list ...)

        (aply length_first_list (a b (c d e) f g (1 2 3)))

    gives 3 because that is the length of (c d e)


8.  Write an FP function which gives a list of numbers corresponding to
    the lengths of lists.  This would be easily done with apply (applytoall)
    and length, so to make it more challenging, have your function return 0
    for every atom in the list:

        (def length_lists ...)
        
        (aply length_lists (a (c d) (e) (1 2 3) x))

        gives (0 2 1 3 0)

9.  Define a function which takes in a list of 2 lists of anything.
    It compares the lengths of these two lists, and if they are equal, it
    returns T, otherwise nil.

        (def len2lists ...)
        (aply len2lists ((5 3 abc)(1 d m)))  ==> T
        (aply len2lists ((5 3 abc)(1 d)))    ==> NIL

10. Now expand on #5 by using the "if" functional form to return the
    value undefined if the two input lists are not of equal length,
    otherwise return the length of the lists.

11. Now write a function that returns T if the lengths of all its
    lists are equal.  That is, generalize #5 to lists that have more
    than 2 lists:

        (def all_lengths_equal == ???)
        all_lengths_equal:((a b) (1 2) ((3) (4)) (mark mike))

12. Write a function that adds 1 to each number in a list of numbers.

13. Write a diagonal former.  It takes a square matrix and returns the
    NW to SE diagonal (kind of tricky).  This is very easy to do if you 
    know ahead of time that you are dealing with a 3-dimensional array,
    for example.  But if you have a square array of any dimension, it is
    much harder to generalize it.  Must use recursion.
