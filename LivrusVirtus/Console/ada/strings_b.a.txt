with text_io; use text_io;

package body strings is

     --  function min is used internally in this package to find
     --  the minimum of 2 integers.

     function min (a, b : integer) return integer is
     begin
          if a < b then
               return a;
          else
               return b;
          end if;
     end min;




     procedure strclear (s : out string) is
     begin
          for i in s'first..s'last loop
               s(i) := ' ';
          end loop;
     end strclear;




     procedure strcpy (s1 : out string; s2 : in string) is
          i1, i2, length : integer;
     begin

          for i in s1'first..s1'last loop
               s1(i) := ' ';
          end loop;

          -- s1 := (1..s1'length=>' ');

          length := min (s1'length, s2'length);

          i1 := s1'first;
          i2 := s2'first;

          for i in 1..length loop
               s1(i1) := s2(i2);
               i1 := i1 + 1;
               i2 := i2 + 1;
          end loop;

     end strcpy;




     procedure strncpy (s1 : out string; s2 : in string; n : integer) is
          i1, i2, length : integer;
     begin
          length := min (n, s1'length);
          length := min (length, s2'length);

          i1 := s1'first;
          i2 := s2'first;

          for i in 1..length loop
               s1(i1) := s2(i2);
               i1 := i1 + 1;
               i2 := i2 + 1;
          end loop;
     end strncpy;





     procedure strcat (s1 : in out string; s2 : in string) is
          len1, len2, pos : integer;
     begin
          len1 := strlen (s1);
          len2 := strlen (s2);
          pos := len1 + s1'first;
          for i in s2'first..s2'first+len2-1 loop
                exit when pos > s1'last;
                s1(pos) := s2(i);
                pos := pos + 1;
          end loop;
     end strcat;




     procedure strcat (fullname : out string; s1, s2 : in string) is
          bigname : string(1..fullname'length);
     begin
          strclear(bigname);
          strcpy (bigname, s1);
          strcat (bigname, s2);
          strcpy (fullname, bigname);
     end strcat;




     procedure strncat (s1 : in out string; s2 : in string; n : integer) is
          len1, len2, pos, count : integer;
     begin
          count := 1;
          len1 := strlen (s1);
          len2 := strlen (s2);
          pos := len1 + s1'first;
          for i in s2'first..s2'first+len2-1 loop
                exit when pos > s1'last;
                s1(pos) := s2(i);
                pos := pos + 1;
                count := count + 1;
                exit when count > n;
          end loop;
     end strncat;





     procedure strput (s1 : out string; s2 : in string;
                       s1start, s2start, leng : integer) is
          i1, i2 : integer;
          xleng : integer;
     begin

          if s1start > s1'last then
               return;
          end if;

          if s1start + leng - 1 > s1'last then
               xleng := s1'last - s1start + 1;
          else
               xleng := leng;
          end if;

          i1 := s1start;
          i2 := s2start;

          for i in 1..xleng loop
               s1(i1) := s2(i2);
               i1 := i1 + 1;
               i2 := i2 + 1;
          end loop;

     end strput;





     function strlen (s : in string) return integer is
     begin
          for i in reverse s'first..s'last loop
               if s(i) /= ' ' then
                    return i-s'first+1;
               end if;
          end loop;
          return 0;
     end strlen;





     function strcmp (s1 : in string; s2 : in string) return integer is
          i1, i2, length, comparison : integer;
     begin
          length := min (s1'length, s2'length);

          i1 := s1'first;
          i2 := s2'first;
          for i in 1..length  loop
               comparison := character'pos(s1(i1)) - character'pos(s2(i2));
               i1 := i1 + 1;
               i2 := i2 + 1;
               if comparison /= 0 then
                    return comparison;
               end if;
          end loop;

          if s1'length = s2'length then
               return 0;
          else
               if s1'length < s2'length then
                    return -1;
               else
                    return 1;
               end if;
          end if;

     end strcmp;



     function strncmp (s1 : in string; s2 : in string; n : integer)
                   return integer is
          i1, i2, length, comparison : integer;
     begin
          length := min (s1'length, s2'length);
          length := min (length, n);

          i1 := s1'first;
          i2 := s2'first;
          for i in 1..length  loop
               comparison := character'pos(s1(i1)) - character'pos(s2(i2));
               i1 := i1 + 1;
               i2 := i2 + 1;
               if comparison /= 0 then
                    return comparison;
               end if;
          end loop;

          if length = n then
               return 0;
          end if;
 
          if s1'length < length then
               return -1;
          else
               return 1;
          end if;

     end strncmp;





     function strxcmp (s1 : in string; s2 : in string) return integer is
          i1, i2, length, comparison : integer;
          ch1, ch2 : character;
     begin
          length := min (s1'length, s2'length);

          i1 := s1'first;
          i2 := s2'first;

          for i in 1..length  loop
               ch1 := s1(i1);
               ch2 := s2(i2);
               comparison := character'pos(ch1) - character'pos(ch2);
               i1 := i1 + 1;
               i2 := i2 + 1;
               if comparison /= 0 then
                    return comparison;
               end if;
               if ch1 = ' ' and ch2 = ' ' then
                    return 0;
               end if;
          end loop;


          if s1'length = s2'length then
               return 0;
          else
               if s1'length < s2'length then
                    return -1;
               else
                    return 1;
               end if;
          end if;

     end strxcmp;



  
     function str_find_ch (s : string; ch : character) return integer is
     begin
          for i in s'first..s'last loop
               if ch = s(i) then
                    return i;
               end if;
          end loop;
          return 0;
     end str_find_ch;




     function str_scan_ch (s1 : string; s2 : string) return integer is
     begin
          for i in s1'first..s1'last loop
               for j in s2'first..s2'last loop
                    if s1(i) = s2(j) then
                         return i;
                    end if;
               end loop;
          end loop;
          return 0;
     end str_scan_ch;



     procedure stralpha (s : in out string) is
          ch  : character;
     begin
          for i in s'first..s'last loop
               ch := s(i);
               if ch >= 'a' and ch <= 'z' then
                    null;
               elsif ch >= 'A' and ch <= 'Z' then
                    null;
               else
                    ch := ' ';
               end if;
          end loop;
     end stralpha;




     procedure strupper (s : in out string) is
          ch     : character;
          diff   : constant integer := character'pos('a')-character'pos('A');
     begin
          for i in s'first..s'last loop
               ch := s(i);
               if ch >= 'a' and ch <= 'z' then
                    s(i) := character'val(character'pos(ch) - diff);
               end if;
          end loop;
     end strupper;




     procedure strlower (s : in out string) is
          ch     : character;
          diff   : constant integer := character'pos('a')-character'pos('A');
     begin
          for i in s'first..s'last loop
               ch := s(i);
               if ch >= 'A' and ch <= 'Z' then
                    s(i) := character'val(character'pos(ch) + diff);
               end if;
          end loop;
     end strlower;




     procedure strshift (s1 : in out string; direction : integer) is
          pos, i1, i2 : integer;
     begin
          if direction < 0 then
               pos := -direction;
               i1 := s1'first;
               i2 := s1'first+pos;

               for i in 1..s1'length - pos loop
                    s1(i1) := s1(i2);
                    i1 := i1 + 1;
                    i2 := i2 + 1;
               end loop;

               -- put blanks at end of string after shifted portion.

               i1 := s1'first + s1'length - pos;
               for i in 1..pos loop
                    s1(i1) := ' ';
                    i1 := i1 + 1;
               end loop;
          else
               pos := direction;
               i1 := s1'last;
               i2 := s1'last-pos;

               for i in 1..s1'length - pos loop
                    s1(i1) := s1(i2);
                    i1 := i1 - 1;
                    i2 := i2 - 1;
               end loop;
               
               -- put blanks at beginning of string before shifted portion.

               i1 := s1'first;
               for i in 1..pos loop
                    s1(i1) := ' ';
                    i1 := i1 + 1;
               end loop;
          end if;
     end strshift;




     procedure strblankout (s : in out string; removed : in string) is
          ch    : character;
     begin

          for i in s'first..s'last loop
               ch := s(i);
               for j in removed'range loop
                    if ch = removed(j) then
                         s(i) := ' ';
                    end if;
               end loop;
          end loop;

     end strblankout;




     function atoi (s : string) return integer is
          acc : integer := 0;
          ch  : character;
          negative : integer := 1;
          firstpos : integer := s'first;
     begin
          if s(s'first) = '-' then
               negative := -1;
               firstpos := s'first + 1;
          end if;
          for i in firstpos..s'last loop
               ch := s(i);
               if ch >= '0' and ch <= '9' then
                    acc := acc*10 + character'pos(ch) - character'pos('0');
               else
                    exit;
               end if;
          end loop;
          return acc * negative;
     end atoi;





     procedure itoa (n : integer; s : in out string) is
          pos : integer := s'first;
          nn, digit : integer;

          function log10approx (n : integer) return integer is
               nn, count : integer;
          begin
               nn := n;
               count := 0;
               while nn >= 10 loop
                    count := count + 1;
                    nn := nn / 10;
               end loop;
               return count;
          end log10approx;

     begin
          if n = 0 then
               s(pos) := '0';
               return;
          end if;

          if n < 0 then
               s(pos) := '-';
               pos := pos + 1;
               nn := -n;
          else
               nn := n;
          end if;

          pos := log10approx(nn) + pos;

          if s'first+pos-1 > s'last then
               for i in s'first..s'last loop
                     s(i) := '*';
               end loop;
               return;
          end if;
 
          while nn >= 1 loop
               digit := nn rem 10;
               nn := nn / 10;
               s(pos) := character'val(character'pos('0') + digit);
               pos := pos - 1;
          end loop;
     end itoa;




     procedure left_justify (s : in out string) is
         firstpos : integer;
         length_line : integer;
         temp : string(1..80);
     begin
         for i in 1..s'last loop
              if s(i) /= ' ' then
                   firstpos := i;
                   exit;
              end if;
         end loop;
         length_line := s'last - firstpos + 1;
         temp(1..length_line) := s(firstpos..s'last);
         for i in 1..s'last loop
              s(i) := ' ';
         end loop;
         s(1..length_line) := temp(1..length_line);
     end left_justify;

 


     function is_alpha (s : in string) return boolean is
          ch : character;
     begin
          for i in s'first..s'last loop
               ch := s(i);
               if (ch >= 'a' and ch <= 'z') or (ch >= 'A' and ch <= 'Z') 
                  or ch = ' ' then
                    null;
               else
                    return false;
               end if;
          end loop;
          return true;
     end is_alpha;



     function is_int (s : in string) return boolean is
          startat : integer;
     begin
          if s(s'first) = '-' or s(s'first) = '+' then
               startat := s'first+1;
          else
               startat := s'first;
          end if;

          for i in startat..s'last loop
               if (s(i) >= '0' and s(i) <= '9') or s(i) = ' ' then
                    null;
               else
                    return false;
               end if;
          end loop;
          return true;
     end is_int;




     function is_numeric (s : in string) return boolean is
     begin
          for i in s'first..s'last loop
               if (s(i) >= '0' and s(i) <= '9') or s(i) = ' ' then
                    null;
               else
                    return false;
               end if;
          end loop;
          return true;
     end is_numeric;



     function strstart (s : in string) return integer is
     begin
          for i in s'first..s'last loop
               if s(i) /= ' ' then
                    return i;
               end if;
          end loop;
          return 0;
     end strstart;



     procedure strclean (s : in out string) is
          ascii : integer;
     begin
          for i in s'first..s'last loop
               ascii := character'pos(s(i));
               if ascii < 32 or ascii > 126 then
                    s(i) := ' ';
               end if;
          end loop;
     end strclean;


     procedure gets (s : out string) is
          n : integer;  -- ignored
          temp_line : string(1..500);
     begin
          get_line (temp_line, n);
          strcpy (s, temp_line);
     end gets;



     procedure gets (s : out string; fp : in out file_type) is
          n : integer;  -- ignored
          temp_line : string(1..500);
     begin
          get_line (fp, temp_line, n);
          strcpy (s, temp_line);
     end gets;


     
     function atof (line : string) return float is
          i, j, state : integer;
          value, sign, integral, fractional, factor : float;
          exponent, expsign : integer;
     
          function convert (ch : character) return integer is
          begin
               return character'pos(ch) - character'pos('0');
          end convert;
     
     begin
          i := line'first;
          sign := 1.0;
     
          if line(i) = '-' then
               sign := -1.0;
               j := i + 1;
          elsif line(i) = '+' then
               j := i + 1;
          else
               j := i;
          end if;
     
          integral := 0.0;
          fractional := 0.0;
          exponent := 0;
          state := 1;      -- if 1, then we are in front of decimal point,
                           -- if 2, then we are in back of decimal point,
          factor := 0.1;
          expsign := 1;
     
          for i in j..line'last loop
               if state = 1 then
                    if line(i) = '.' then
                         state := 2;
                    else
                         integral := integral * 10.0 + float(convert(line(i)));
                    end if;
               elsif state = 2 then
                    if line(i) = 'e' or line(i) = 'E' then
                         state := 3;
                    else
                         fractional := fractional + 
                                          float (convert(line(i)))*factor;
                         factor := factor / 10.0;
                    end if;
               else    -- state = 3
                    if line(i) = '-' then
                         expsign := -1;
                    elsif line(i) = '+' then
                         expsign := 1;
                    else
                         exponent := exponent*10 + convert(line(i));
                    end if;
               end if;
          end loop;
     
          value := sign * (float(integral) + fractional);
          if expsign = -1 then
               for i in 1..exponent loop
                    value := value / 10.0;
               end loop;
          else
               for i in 1..exponent loop
                    value := value * 10.0;
               end loop;
          end if;
          return value;
     
     end atof;


end strings;
