' freecell.wx - wxBasic version of FreeCell
' (c) 2001 David Cuny
'
' Please excuse the code! It's not been cleaned up, and
' the variables could probably use better names.

Option Explicit

Const   ProgName    = "wxFreeCell",
        ProgVersion = "0.41"

Randomize

Const   Suit    = 1,    ' index to deck[], suit of card
        Rank    = 2,    ' index to deck[], rank of card
        Hearts  = 1,
        Clubs   = 2,
        Diamonds= 3,
        Spades  = 4,
        Ace     = 1,
        Jack    = 11,
        Queen   = 12,
        King    = 13,
        Special = 14,
        Empty   = 1,
        White   = 2,
        Back    = 3,
        Blank   = 4,
        CardCX  = 71,
        CardCY  = 96,
        SpaceCX = 6,
        SpaceCY = 18,
        MidGap  = 61,
        WinCX   = (CardCX * 8) + MidGap,
        WinCY   = 500

' Custom events
Const   wxID_RESTART   = wxID_HIGHEST + 3,
        wxID_STATS     = wxID_HIGHEST + 4,
        wxID_OPTIONS   = wxID_HIGHEST + 5,
        wxID_CHEAT     = wxID_HIGHEST + 8,
        wxID_HINT      = wxID_HIGHEST + 9,
        wxID_WARN      = wxID_HIGHEST + 10

Common  seed =  Rnd(32000),         ' seed for the game
        deep[8],                    ' height of a pile
        cell[8, 2],                 ' cell pile, rank and suit
        goal[8, 2],                 ' goal pile, rank and suit
        pile[8, 52, 2],             ' 8 piles, max 52, rank and suit
        cellAt[8, 2],               ' position of cells
        goalAt[8, 2],               ' position of goals
        pileAt[8, 2],               ' position of piles
        hitPile     = 0,            ' index of clicked pile
        hitGoal     = 0,            ' index of clicked goal
        hitCell     = 0,            ' index of clicked cell
        armedPile   = 0,            ' index of armed pile
        armedCell   = 0,            ' index of armed cell
        remaining   = 52,           ' card remaining
        cheatFlag   = False,        ' allow illegal moves
        hintFlag    = True,         ' show hints
        warnFlag    = False         ' warn before moving piles

Const   GreenBrush = wxBrush( wxColor( 0x00, 0x7B, 0x00), wxSOLID )

' create the frame
Common frame = New wxFrame( 0, -1, ProgName, wxPoint(0,0), wxSize(WinCX, WinCY) )
    frame.SetClientSize( wxSize(WinCX, WinCY) )
    frame.Center()

' create a status bar
frame.CreateStatusBar(2)

Common mGame = New wxMenu()
    mGame.Append( wxID_NEW, "&New", "Start a new game")
    mGame.Append( wxID_RESTART, "&Restart", "Start existing game over")
    mGame.AppendSeparator()
    mGame.Append( wxID_HINT, "&Give hints", "Show hints about possible moves", True )
    mGame.Append( wxID_WARN, "&Warn before moving piles", "Warn before moving a pile", True )
    mGame.AppendSeparator()
    mGame.Append( wxID_CHEAT, "&Cheat", "Allow illegal moves", True )
    mGame.AppendSeparator()
    mGame.Append( wxID_EXIT, "E&xit\tAlt-X", "Quit this program")

Common mHelp = New wxMenu()
    mHelp.Append( wxID_ABOUT, "&About...\tCtrl-A", "About " & ProgName )

' create a menubar for the menus
Common menuBar = New wxMenuBar()
    menuBar.Append(mGame,   "&Game")
    menuBar.Append(mHelp,   "&Help")

' attach the menubar to the frame
frame.SetMenuBar(menuBar)


' create a bitmap for double buffering
Dim bmp = wxEmptyBitmap( WinCX, WinCY )

' create a store for the graphic
Common bmpDC = wxMemoryDC()
    bmpDC.SelectObject( bmp )
    bmpDC.SetBackground( GreenBrush )
    bmpDC.Clear()


' load the bitmap, return device context
Function loadBmp( name )
    Dim myXPM = New wxEmptyBitmap( 0, 0 )
    If !myXPM.LoadFile( name, wxBITMAP_TYPE_BMP ) Then
        wxMessageBox( "Can't find file " & name, "Missing File", wxOK + wxICON_INFORMATION, frame )
        frame.Close()
    End If
    ' create a store for the graphic
    Dim myDC = new wxMemoryDC()
    myDC.SelectObject( myXPM )
    Return myDC
End Function

Common Cards = loadBmp( "cards.bmp" )


Sub drawCard( x, y, theRank, theSuit )
    bmpDC.Blit( x, y, CardCX, CardCY, Cards,
        (theRank-1)*CardCX, (theSuit-1)*CardCY )
End Sub


Sub invertCard( x, y, theRank, theSuit )
    bmpDC.Blit( x, y, CardCX, CardCY, Cards,
        (theRank-1)*CardCX, (theSuit-1)*CardCY, wxSRC_INVERT )
End Sub


sub drawPileCard( thePile, invert )

    Dim i = deep[thePile]

    ' rank and suit of card
    Dim theRank = pile[thePile,i,1]
    Dim theSuit = pile[thePile,i,2]

    ' destination in bitmap
    Dim dstX = pileAt[thePile,1]
    Dim dstY = pileAt[thePile,2] + ((i-1)*SpaceCY)

    ' invert the card
    if invert then
        invertCard( dstX, dstY, pile[thePile,i,1], pile[thePile,i,2] )
    else
        drawCard( dstX, dstY, pile[thePile,i,1], pile[thePile,i,2] )
    end if

    ' update
    Dim dc = wxClientDC( frame )
    dc.BeginDrawing()
    dc.Blit( dstX, dstY, CardCX, CardCY, bmpDC, dstX, dstY )
    dc.EndDrawing()

End Sub

sub drawCellCard( theCell, invert )

    ' rank and suit of card
    Dim theRank = cell[theCell,1]
    Dim theSuit = cell[theCell,2]

    ' destination in bitmap
    Dim dstX = cellAt[theCell,1]
    Dim dstY = cellAt[theCell,2]

    ' invert the card
    if invert then
        invertCard( dstX, dstY, cell[theCell,1], cell[theCell,2] )
    else
        drawCard( dstX, dstY, cell[theCell,1], cell[theCell,2] )
    end if

    ' update
    Dim dc = wxClientDC( frame )
    dc.BeginDrawing()
    dc.Blit( dstX, dstY, CardCX, CardCY, bmpDC, dstX, dstY )
    dc.EndDrawing()


End Sub


sub drawGoalCard( theGoal )

    ' rank and suit of card
    Dim theRank = cell[theGoal,1]
    Dim theSuit = cell[theGoal,2]

    ' destination in bitmap
    Dim dstX = goalAt[theGoal,1]
    Dim dstY = goalAt[theGoal,2]

    drawCard( dstX, dstY, goal[theGoal,1], goal[theGoal,2] )

    ' update
    Dim dc = wxClientDC( frame )
    dc.BeginDrawing()
    dc.Blit( dstX, dstY, CardCX, CardCY, bmpDC, dstX, dstY )
    dc.EndDrawing()


End Sub




Sub drawBoard()

    Dim i, j

    ' erase the bitmap
    bmpDC.Clear()

    ' cells and goals
    for i = 1 to 4
        drawCellCard( i, False )
        drawGoalCard( i )
    end for

    ' draw columns of cards
    for i = 1 to 8
        for j = 1 to deep[i]
            drawCard( pileAt[i,1], pileAt[i,2] + (j-1)*SpaceCY,
                pile[i,j,1], pile[i,j,2] )
        end for
    end for

End Sub

Sub onPaint( event )
    ' get the DC of the frame
    Dim dc = wxPaintDC( frame )
    dc.BeginDrawing()

    dc.SetBrush( GreenBrush )
    dc.DrawRectangle( 0, 0, 1000, 1000 )

    ' blit the bitmap
    dc.Blit( 0, 0, WinCX, WinCY, bmpDC, 0, 0 )

    dc.EndDrawing()
End Sub
Connect( frame, -1, wxEVT_PAINT, "onPaint" )

Sub repaintWindow( fromScratch )

    ' redraw
    if fromScratch then
        drawBoard()
    end if

    ' update
    Dim dc = wxClientDC( frame )
    dc.BeginDrawing()
    dc.Blit( 0, 0, WinCX, WinCY, bmpDC, 0, 0 )
    dc.EndDrawing()

End Sub


Function testHitCard( mouseX, mouseY, cardX, cardY )
    If mouseX >= cardX and
       mouseY >= cardY and
       mouseX <= cardX + CardCX and
       mouseY <= cardY + CardCY then
        return True
    End If
    Return False
End Function

sub hitTest( x, y )

    Dim i, j, pileTop

    ' clear variables
    hitPile = 0
    hitGoal = 0
    hitCell = 0

    ' top of window?
    If y <= CardCY then
        ' check cells and goals
        For i = 1 to 4
            If testHitCard( x, y, cellAt[i,1], cellAt[i,2] ) Then
                hitCell = i
                Return 

            ElseIf testHitCard( x, y, goalAt[i,1], goalAt[i,2] ) Then
                hitGoal = i
                Return 
            End If

        End For
    End If

    ' hit top of pile?
    for i = 1 to 8
        if y >= pileAt[i,2] and
           x >= pileAt[i,1] and
           x <= pileAt[i,1] + CardCX then
            pileTop = pileAt[i,2] + CardCY + ((deep[i]-1)*SpaceCY)
            ' don't need to hit a card if no column
            if deep[i] = 0 or y <= pileTop then
                hitPile = i
                Return
            end if
        end if
    end for
End Sub


function sameColorSuit( theSuit )
    select case theSuit
    case Clubs      : return Spades
    case Hearts     : return Diamonds
    case Spades     : return Clubs
    case Diamonds   : return Hearts
    end select
end function


function goodMove( cheat, srcRank, srcSuit, dstRank, dstSuit )

    if cheat then
        return True
    end if

    ' not ascending?
    if srcRank != dstRank-1 then
        return False
    end if

    ' same suit?
    if srcSuit = dstSuit then
        return False
    end if

    ' same color suit?
    if srcSuit = sameColorSuit( dstSuit ) then
        return False
    end if

    return True

end function


Function noLongerNeeded( theRank, theSuit )
    ' Returns true if there are no cards of opposite suit
    ' and lower rank value in the freecells or piles

    Dim i, j, suit1, suit2

    ' get opposite colors
    if theSuit = Hearts or theSuit = Diamonds then
        suit1 = Clubs
        suit2 = Spades
    else
        suit1 = Hearts
        suit2 = Diamonds
    end if        

    ' check the freecells
    for i = 1 to 4
        if cell[i,1] < theRank and
           ( cell[i,2] = suit1 or cell[i,2] = suit2 ) then
           Return False
        end if
    end for

    ' check the piles
    for i = 1 to 8
        for j = 1 to deep[i]
            if pile[i,j,1] < theRank and
                ( pile[i,j,2] = suit1 or pile[i,j,2] = suit2 ) then
                return False
            end if
        end for
    end for

    ' no cards found
    return True

End Function


Sub decreaseRemaining()
    remaining = remaining - 1
    frame.SetStatusText("Cards Left: " & remaining, 1)
End Sub

Function autoMoveCell()
    ' automatically move cards out of free cells
    ' returns true if cards were moved
    ' this can ignore aces, since the are automatically
    ' moved by autoMovePile

    Dim i, j

    ' check each goal
    For i = 1 to 4
        ' is there a card in the goal?
        if goal[i,1] != Special then
            ' look for follower in cell
            for j = 1 to 4
                If  cell[j,1] <> Special And
                    cell[j,1] = goal[i,1]+1 And
                    cell[j,2] = goal[i,2] And
                    noLongerNeeded( cell[j,1], cell[j,2] ) Then

                    ' move it
                    goal[i,1] = cell[j,1]
                    goal[i,2] = cell[j,2]

                    ' remove
                    cell[j,1] = Special
                    cell[j,2] = Empty

                    decreaseRemaining()
                    return True
                End If
            End For
        end if
    End For
    Return False
End Function

Function autoMovePile()
    ' automatically move cards out of pile
    ' returns true if cards were moved

    Dim i, j, k

    ' examine each pile
    For i = 1 to 8
        ' top card
        j = deep[i]
        If j then
            ' examine each goal
            For k = 1 to 4
                ' Ace to blank spot or 2 to Ace?
                If (pile[i,j,1] = Ace and goal[k,1] = Special) Or
                   (pile[i,j,1] = 2 and goal[k,1] = Ace and
                       pile[i,j,2] = goal[k,2]) Then

                    ' move to goal
                    goal[k,1] = pile[i,j,1]
                    goal[k,2] = pile[i,j,2]
                    ' remove from pile
                    deep[i] = deep[i] - 1
                    decreaseRemaining()
                    return True

                ' next card in sequence?
                ElseIf  pile[i,j,2] <> Special And
                        pile[i,j,1] = goal[k,1]+1 And
                        pile[i,j,2] = goal[k,2] And
                        noLongerNeeded( pile[i,j,1], pile[i,j,2] ) Then

                    ' move it
                    goal[k,1] = pile[i,j,1]
                    goal[k,2] = pile[i,j,2]

                    ' remove
                    deep[i] = deep[i] - 1
                    decreaseRemaining()

                    return True

                End If
            Next
        End if
    End For
    Return False
End Function

Sub autoMove()
    ' auto move cards in cell and pile

    Dim repaint = False

    While autoMoveCell() or autoMovePile()
        ' Window needs to be redrawn
        repaintWindow( True )
    End While

End Sub


function maxMoveableColumn( target )
    ' return the maximum size of a movable column
    ' equation is: (freeCells+1) * (emptyPiles+1)

    dim i, freeCells, emptyPiles

    ' count free cells
    freeCells = 0
    for i = 1 to 4
        if cell[i,1] = Special then
            freeCells = freeCells + 1
        end if
    end for

    ' count empty piles
    emptyPiles = 0
    for i = 1 to 8
        if deep[i] = 0 and i <> target then
            emptyPiles = emptyPiles + 1
        end if
    end for

    return (freeCells+1) * (emptyPiles+1)

end function


Function isWorthlessMove( src, dst, n )
    ' Return true if move places card of same suit onto
    ' another card of the same suit

    Dim     at, i

    ' entire column/single card?
    If n = 1 Then
        Return False
    End if


    ' not part of a column?
    If !goodMove(False, pile[src,n,1],   pile[src,n,2],
                        pile[src,n-1,1], pile[src,n-1,2] ) Then
        Return False         
    End If

    ' same suit?
    If pile[src,n-1,1] = pile[dst, deep[dst], 1] Then
        ' check out the goals
        For i = 1 To 4
            ' uncovers card going to goal?
            If pile[src,n-1,2] = goal[i,2] And
               pile[src,n-1,1] = goal[i,1]-1 Then
                Return False
            End If
        End For

        ' pointless move
        Return True
    End If

    Return False

End Function


Function getHint()

    Dim     src, dst, i, j, k, l, maxColumn

    If !hintFlag Then
        Return "Hints Off"
    End If

    ' all the cards gone?
    If remaining = 0 Then
        Return "Game Over"
    End If


    ' can any cards in freecells can be moved to the goals?
    For i = 1 To 4
        If cell[i,1] <> Special Then
            ' examine each goal
            For j = 1 To 4
                If ( cell[i,1] = Ace And goal[j,1] = Special ) Or
                   ( cell[i,1] = goal[j,1] + 1 And
                     cell[i,2] = goal[j,2] ) Then
    
                    Return "Card in freecell " & i & " can move to goal"
                End If
            End For
        End If
    End For


    ' can any cards in piles can be moved usefully?
    For i = 1 To 8
        ' look at each pile
        src = deep[i]

        ' any cards in the pile?
        If src <> 0 Then
            ' examine each goal
            For j = 1 To 4
                If ( pile[i,src,1] = Ace And goal[j,1] = Special ) Or
                   ( pile[i,src,1] = goal[j,1] + 1 And
                     pile[i,src,2] = goal[j,2] ) Then

                    Return "Card on pile " & i & " can move to goal"
                End If
            End For

            ' examine each pile
            For j = 1 To 8

                ' number of cards in pile
                dst = deep[j]
                
                ' maximum size column that can be moved
                maxColumn = maxMoveableColumn( i )

                ' subtract 1, since we start in 1 deep
                maxColumn = maxColumn - 1

                ' look for a pile that can be moved
                For k = dst-1 To 1 Step -1

                    ' column too deep?
                    maxColumn = maxColumn - 1
                    If maxColumn < 0 Then
                        Exit For
                    End If

                    ' not part of pile?
                    If !goodMove( False, pile[j,k+1,1], pile[j,k+1,2],
                                         pile[j,k,1],   pile[j,k,2] ) Then
                        Exit For
                    End If

                    ' look for a pile to place it on
                    For l = 1 to 8
                        ' can it move to the top of this pile?
                        If l <> j and deep[l] And
                            goodMove(False, pile[j,k,1], pile[j,k,2],
                                            pile[l,deep[l], 1], pile[l,deep[l], 2] ) And
                            !isWorthlessMove( j, l, k ) Then
                                Return "Column on pile " & j &
                                    " can move to pile " & l
                        End If
                    End For

                End For

                ' good move? 
                If dst <> 0 And i <> j And
                    goodMove( False, pile[i,src,1], pile[i,src,2],
                                     pile[j,dst,1], pile[j,dst,2] ) And
                    !isWorthlessMove( i, j, src ) Then
                        Return "Card on pile " & i & " can move to pile " & j
                End If
            End For
        End If
    End For

    ' can any cards in freecells to pile?
    For i = 1 To 4
        ' not empty?
        If cell[i,1] <> Special Then
            ' examine each pile
            For j = 1 To 8
                ' not empty?
                If deep[j] And
                goodMove( False, cell[i,1],         cell[i,2],
                                 pile[j,deep[j],1], pile[j,deep[j],2] ) Then
                    Return "Card in freecell " & i & " can move to pile " & j
                End If
            End For
        End If
    End For


    ' any free piles?
    For i = 1 To 8
        If deep[i] = 0 Then
            ' any columns?
            For j = 1 To 8
                If deep[j] > 1 Then
                    Return "Can move any card to pile " & i
                End If
            End For
        End If
    End For

    ' any freecells?
    For i = 1 To 4
        If cell[i,1] = Special Then
            Return "Can move any card to freecell"
        End If
    End For

    ' can't find a move    
    Return "Sorry, can't help"

End Function

Sub hint()
    frame.SetStatusText( getHint(), 0 )
End Sub



function moveColumn( src, dst )
    ' if source is a pile, move it

    Dim     i, j, srcTop, dstTop, maxSize

    ' position of cards
    srcTop = deep[src]
    dstTop = deep[dst]

    ' can we rule it out?
    if dstTop <> 0 and pile[dst, dstTop, 1] <= pile[src, srcTop, 1] then
        return False
    elsif srcTop = 1 then
        return False
    end if

    ' get max size
    maxSize = maxMoveableColumn( dst )
    if maxSize < 2 then
        Return False
    end if

    ' walk down the pile
    for i = srcTop-1 to 1 step -1

        maxSize = maxSize - 1

        ' not part of a pile
        if maxSize < 0 or
           !goodMove( False, pile[src, i+1, 1], pile[src, i+1, 2],
                             pile[src, i, 1],   pile[src, i, 2] ) then

            ' moving onto empty column?
            if dstTop = 0 and i != srcTop-1 then
                if wxMessageBox( "Move column to empty pile?", ProgName,
                                 wxYES_NO | wxICON_QUESTION, frame ) != wxYES then
                    ' cancelled
                    return False
                end if

                ' move column
                for j = i+1 to srcTop
                    dstTop = dstTop + 1
                    pile[dst, dstTop, 1] = pile[src, j, 1]
                    pile[dst, dstTop, 2] = pile[src, j, 2]
                end for

                ' adjust depths
                deep[src] = i
                deep[dst] = dstTop
    
                ' exit
                return True

            end if

            return False
        end if

        ' top of pile to move?
        if srcTop <> 0 and
            goodMove( False, pile[src, i, 1], pile[src, i, 2],
                             pile[dst, dstTop, 1],   pile[dst, dstTop, 2] ) then

            ' prompt user before moving?
            if warnFlag then
                if wxMessageBox( "Move column?", ProgName,
                                 wxYES_NO | wxICON_QUESTION, frame ) != wxYES then
                    ' cancelled
                    return False
                end if
            end if

            ' move the pile
            for j = i to srcTop
                dstTop = dstTop + 1
                pile[dst, dstTop, 1] = pile[src, j, 1]
                pile[dst, dstTop, 2] = pile[src, j, 2]
            end for

            ' adjust depths
            deep[src] = i - 1
            deep[dst] = dstTop

            ' exit
            return True

        end if

    end for

    ' entire column moving
    if dstTop = 0 then
        if wxMessageBox( "Move column to empty pile?", ProgName,
                         wxYES_NO | wxICON_QUESTION, frame ) != wxYES then
            ' cancelled
            return False
        end if
    elsif warnFlag then
        if wxMessageBox( "Move column?", ProgName,
                         wxYES_NO | wxICON_QUESTION, frame ) != wxYES then
            ' cancelled
            return False
        end if
    end if

    ' move the pile
    for j = 1 to srcTop
        dstTop = dstTop + 1
        pile[dst, dstTop, 1] = pile[src, j, 1]
        pile[dst, dstTop, 2] = pile[src, j, 2]
    end for

    ' adjust depths
    deep[src] = 0
    deep[dst] = dstTop

    return True

end Function

sub onClick( event )

    dim i, j

    ' do hit test
    hitTest( event.GetX(), event.GetY() )

    If hitCell then
        If armedCell then
            ' empty cell?
            if cell[hitCell,1] = Special then
                ' swap
                cell[hitCell,1] = cell[armedCell,1]
                cell[hitCell,2] = cell[armedCell,2]
                drawCellCard( hitCell, False )

                cell[armedCell,1] = Special
                cell[armedCell,2] = Empty
                drawCellCard( armedCell, False )

                ' disarm and update 
                armedCell = 0

            else
                ' disarm cell
                drawCellCard( armedCell, False )            
                armedCell = 0

            end if

        elseif armedPile then
            ' already something in freecell?
            if cell[hitCell,1] <> Special then
                ' disarm
                drawPileCard( armedPile, False )            
                armedPile = 0

            else
                ' move card to cell
                i = deep[armedPile]
                cell[hitCell,1] = pile[armedPile,i,1]
                cell[hitCell,2] = pile[armedPile,i,2]

                ' removed from pile
                pile[armedPile,i,1] = 0
                deep[armedPile] = deep[armedPile] - 1

                ' disarm and updated
                armedPile = 0
                repaintWindow( True )
            end if

        else
            ' is there a card there to arm?
            if cell[hitCell,1] <> Special then
                drawCellCard( hitCell, True )
                armedCell = hitCell
            end if

        end if

    ElseIf hitGoal then
        if armedCell then
            if ( goal[hitGoal,1] = Special and cell[armedCell,1] = Ace ) or
               ( cell[armedCell,1] = goal[hitGoal,1] + 1 and
                  cell[armedCell,2] = goal[hitGoal,2] ) then

                ' move to goal
                goal[hitGoal,1] = cell[armedCell,1]
                goal[hitGoal,2] = cell[armedCell,2]
                drawGoalCard( hitGoal )

                ' clear cell
                cell[armedCell,1] = Special
                cell[armedCell,2] = Empty
                drawCellCard( armedCell, False )
                armedCell = 0

                ' update remaining
                decreaseRemaining()

            else
                ' disarm cell
                drawCellCard( armedCell, False )
                armedCell = 0
            end if

        elseif armedPile then
            i = deep[armedPile]
            if ( goal[hitGoal,1] = Special and pile[armedPile,i,1] = Ace ) or
               ( pile[armedPile,i,1] = goal[hitGoal,1] + 1 and
                  pile[armedPile,i,2] = goal[hitGoal,2] ) then

                ' move to goal
                goal[hitGoal,1] = pile[armedPile,i,1]
                goal[hitGoal,2] = pile[armedPile,i,2]

                ' clear cell
                deep[armedPile] = deep[armedPile] - 1
                armedPile = 0


                ' update window
                decreaseRemaining()
                repaintWindow( True )

            else
                ' disarm pile
                drawPileCard( armedPile, False )
                armedPile = 0
            end if
        end if

    ElseIf hitPile then
        if armedPile then
            if armedPile = hitPile then
                ' disarm
                drawPileCard( armedPile, False )
                armedPile = 0

            ' move pile?
            elsif moveColumn( armedPile, hitPile ) then
                armedPile = 0
                repaintWindow( True )

            ' move card to pile?
            elsif deep[hitPile] = 0 or
                goodMove( cheatFlag,
                            pile[armedPile,deep[armedPile],1],
                            pile[armedPile,deep[armedPile],2],
                            pile[hitPile,deep[hitPile],1],
                            pile[hitPile,deep[hitPile],2] ) then
                ' move to pile
                deep[hitPile] = deep[hitPile] + 1
                i = deep[armedPile]
                j = deep[hitPile]

                ' move to pile
                pile[hitPile,j,1] = pile[armedPile,i,1]
                pile[hitPile,j,2] = pile[armedPile,i,2]

                deep[armedPile] = deep[armedPile] - 1

                ' disarm and redraw
                armedPile = 0
                repaintWindow( True )

            else
                ' deselect card
                drawPileCard( armedPile, False )
                armedPile = 0

            end if

        elsif armedCell then
            if deep[hitPile] = 0 or goodMove( cheatFlag,
                                              cell[armedCell,1],
                                              cell[armedCell,2],
                                              pile[hitPile,deep[hitPile],1],
                                              pile[hitPile,deep[hitPile],2] ) then

                ' index into pile
                deep[hitPile] = deep[hitPile] + 1
                i = deep[hitPile]

                ' move to pile
                pile[hitPile,i,1] = cell[armedCell,1]
                pile[hitPile,i,2] = cell[armedCell,2]

                ' remove from cell
                cell[armedCell,1] = Special
                cell[armedCell,2] = Empty

                ' disarm and redraw
                armedCell = 0
                repaintWindow( True )

            else
                ' deselect card
                drawCellCard( armedCell, False )
                armedCell = 0

            end if

        else
            ' arm the pile
            drawPileCard( hitPile, True )
            armedPile = hitPile

        end if    

    ElseIf armedCell then
    ElseIf armedPile then
        drawPileCard( armedPile, False )
        armedPile = 0

    End If

    ' nothing armed?
    If !armedPile And !armedCell Then
        ' check if there's anything to automatically move
        autoMove()
    End If

    ' show hint
    hint()

End sub

' attach callback
Connect( frame, -1, wxEVT_LEFT_DOWN,   "onClick" )

sub onDoubleClick( event )

    dim i, j

    ' do hit test
    hitTest( event.GetX(), event.GetY() )

    If hitPile and armedPile and armedPile = hitPile then
        ' look for free cell
        for i = 1 to 4
            if cell[i,1] = Special then
                ' move to pile
                cell[i,1] = pile[armedPile, deep[armedPile], 1]
                cell[i,2] = pile[armedPile, deep[armedPile], 2]
                deep[armedPile] = deep[armedPile] - 1
                armedPile = 0

                ' update window
                repaintWindow( True )

                exit for
            end if
        end for

        ' check if there's anything to automatically move
        autoMove()

    End If

    ' Disarm anything that's armed
    If armedCell Then
        ' deselect card
        drawCellCard( armedCell, False )
        armedCell = 0

    Elsif armedPile then
        drawPileCard( armedPile, False )
        armedPile = 0


    ElseIf armedCell then
        drawCellCard( armedCell, False )
        armedCell = 0

    End If

    hint()

End sub

Connect( frame, -1, wxEVT_LEFT_DCLICK, "onDoubleClick" )


Sub onRightDown( event )

    Dim     i, j, pileY

    ' get the mouse position
    Dim x = event.GetX()
    Dim y = event.GetY()

    ' top of window?
    If y <= CardCY then
        ' missed piles
        Exit Sub
    End If

    ' hit card in pile?
    for i = 1 to 8
        ' check each card in the pile, top first
        for j = deep[i] to 1 step -1
            ' calculate y position of card
            pileY = pileAt[i,2] + ((j-1)*SpaceCY)

            ' mouse in card?
            If testHitCard( x, y, pileAt[i,1], pileY ) then

                ' grab the mouse
                frame.CaptureMouse()

                ' draw the card
                drawCard( pileAt[i,1], pileY, pile[i,j,1], pile[i,j,2] )

                ' update window, no redraw
                repaintWindow( False )
                
                ' leave
                exit sub
            End If
        end for
    end for

End Sub
Connect( frame, -1, wxEVT_RIGHT_DOWN, "onRightDown" )

Sub onRightUp( event )
    ' release the mouse
    frame.ReleaseMouse()

    ' redraw the entire board
    repaintWindow( True )

End Sub
Connect( frame, -1, wxEVT_RIGHT_UP, "onRightUp" )


Sub calcAt()
    ' calculate position of cells
    Dim i

    Dim x = 0,  y = 0
    for i = 1 to 4
        cellAt[i,1] = x
        cellAt[i,2] = y
        x = x + CardCX
    end for

    ' calculate position of goals
    x = (CardCX*4) + MidGap
    y = 0
    for i = 1 to 4
        goalAt[i,1] = x
        goalAt[i,2] = y
        x = x + CardCX
    end for

    ' calculate position of piles
    x = SpaceCX
    y = CardCY+10
    for i = 1 to 8
        pileAt[i,1] = x
        pileAt[i,2] = y
        x = x + CardCX + SpaceCX
    end for

End Sub


Sub shuffle( newGame )
    ' Assign suit, rank and picked status
    dim deck[52,3], shuffled[52,2]
    dim at, theSuit, theRank, pick, i, j

    If newGame Then
        ' pick a new seed
        Randomize()
        seed = Rnd(32000)
    End If

    ' reuse the old seed
    Randomize( seed )

    frame.SetTitle( ProgName & " Game #" & seed )

    ' intialize cards
    at = 1
    for theSuit = 1 to 4
        for theRank = 1 to 13
            deck[at,1] = theRank
            deck[at,2] = theSuit
            deck[at,3] = False
            at = at + 1
        end for
    end for

    ' shuffle
    for i = 1 to 52
        ' pick a card
        pick = rnd(52)
        ' already taken?
        while( deck[pick,3] )
            ' move to next card
            pick = pick + 1
            ' end of deck?
            if pick > 52 then
                ' move to first card
                pick = 1
            end if
        end while

        ' flag as taken
        deck[pick,3] = True

        ' store card
        shuffled[i,1] = deck[pick,1]
        shuffled[i,2] = deck[pick,2]

    end for

    ' place shuffled cards in piles
    at = 1
    for i = 1 to 8
        ' height of pile
        if i < 5 then
            deep[i] = 7
        else
            deep[i] = 6
        end if
        for j = 1 to deep[i]
            pile[i,j,1] = shuffled[at,1]
            pile[i,j,2] = shuffled[at,2]
            at = at + 1
        end for
    end for

    ' set up the cells and goals
    for i = 1 to 4
        cell[i,1] = Special
        cell[i,2] = Empty

        goal[i,1] = Special
        goal[i,2] = Empty

    end for

    ' remaining cards
    remaining = 52
    frame.SetStatusText("Cards Left: " & remaining, 1)

End Sub


Sub initGame( newGame )

    ' calcuate position of cards
    calcAt()

    ' set flags
    mGame.Check( wxID_WARN, warnFlag )
    mGame.Check( wxID_HINT, hintFlag )
    mGame.Check( wxID_CHEAT, cheatFlag )

    ' shuffle cards
    shuffle( newGame )

    ' move cards automatically
    autoMove()

    ' paint the windows
    repaintWindow(True)

    ' show hint
    hint()

End Sub




' callback for the New menu option
Sub OnNew( event )
    initGame(1)
End Sub
Connect( frame, wxID_NEW, wxEVT_COMMAND_MENU_SELECTED, "OnNew" )

' callback for the Restart menu option
Sub OnRestart( event )
    initGame(0)
End Sub
Connect( frame, wxID_RESTART, wxEVT_COMMAND_MENU_SELECTED, "OnRestart" )



' callback for the Warn Before Moving Piles menu option
Sub OnWarn( event )
    ' toggle cheat mode
    warnFlag = !warnFlag
    mGame.Check( wxID_WARN, warnFlag )
End Sub
Connect( frame, wxID_WARN, wxEVT_COMMAND_MENU_SELECTED, "OnWarn" )

' callback for the Show Hints menu option
Sub OnHint( event )
    ' toggle hint mode
    hintFlag = !hintFlag
    mGame.Check( wxID_HINT, hintFlag )
    hint()
End Sub
Connect( frame, wxID_HINT, wxEVT_COMMAND_MENU_SELECTED, "OnHint" )


' callback for the Cheat menu option
Sub OnCheat( event )
    ' toggle cheat mode
    cheatFlag = !cheatFlag
    mGame.Check( wxID_CHEAT, cheatFlag )
End Sub
Connect( frame, wxID_CHEAT, wxEVT_COMMAND_MENU_SELECTED, "OnCheat" )


' callback for the Exit menu option
Sub OnQuit( event )
    frame.Close(True)
End Sub
Connect( frame, wxID_EXIT, wxEVT_COMMAND_MENU_SELECTED, "OnQuit" )

' callback for the About menu option
Sub OnAbout( event )
    Dim msg = ProgName & " " & ProgVersion & "\n" &
    "FreeCell clone written in wxBasic\n\n"
    wxMessageBox( msg, "About " & ProgName,
        wxOK + wxICON_INFORMATION, frame )
End Sub
Connect( frame, wxID_ABOUT, wxEVT_COMMAND_MENU_SELECTED, "OnAbout" )


initGame(1)
frame.Show(True)
